2845. Count of Interesting Subarrays

STATEMENT:
You are given a 0-indexed integer array nums, an integer modulo, and an integer k.
Your task is to find the count of subarrays that are interesting.
A subarray nums[l..r] is interesting if the following condition holds:
    Let cnt be the number of indices i in the range [l, r] such that nums[i] % modulo == k. Then, cnt % modulo == k.
Return an integer denoting the count of interesting subarrays.
Note: A subarray is a contiguous non-empty sequence of elements within an array.

SOULUTION:
class Solution
{
public:
    long long countInterestingSubarrays(vector<int>& nums, int modulo, int k)
    {
        int n = nums.size();                // Get the size of the input array nums.
        int prefix = 0;                     // Initialize prefix sum variable.
        unordered_map<int, int> freq;       // Create an unordered_map to store prefix frequency.
        freq[0] = 1;                        // Initialize the frequency of a prefix sum of 0 as 1.
        long long result = 0;                // Initialize the result variable.

        for (int i = 0; i < n; i++)          // Iterate through the input array nums.
        {
            // Update prefix sum and convert nums[i] into a binary value (1 if satisfies condition, 0 otherwise).
            prefix = (prefix + (nums[i] % modulo == k ? 1 : 0)) % modulo;

            // Calculate the required remainder to make the count of elements satisfying the condition equal to k.
            int required = (prefix - k + modulo) % modulo;

            // Add the count of subarrays with the required remainder to the result.
            result += freq[required];

            // Increment the count for the current prefix sum in the frequency map.
            freq[prefix]++;
        }

        return result;  // Return the final result, which represents the count of interesting subarrays.
    }
};
